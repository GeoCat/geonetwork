/**
 * GeoNetwork API
 *
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ProcessStep } from './processStep';
import { SpecificationConformance } from './specificationConformance';
import { FeatureType } from './featureType';
import { IndexingErrorMsg } from './indexingErrorMsg';
import { ResourceDate } from './resourceDate';
import { Overview } from './overview';
import { Maintenance } from './maintenance';
import { RecordLink } from './recordLink';
import { ResourceIdentifier } from './resourceIdentifier';
import { DateRange } from './dateRange';
import { DateRangeDetails } from './dateRangeDetails';
import { CrsDetails } from './crsDetails';
import { Thesaurus } from './thesaurus';
import { Measure } from './measure';
import { Link } from './link';
import { VerticalRange } from './verticalRange';

export interface IndexRecord {
  [key: string]: any;
  info?: {
    _id: string;
    [key: string]: any;
  };
  docType?: IndexRecord.DocTypeEnum;
  document?: string;
  metadataIdentifier?: string;
  standardNameObject?: { [key: string]: string };
  standardVersionObject?: { [key: string]: string };
  indexingDate?: string;
  dateStamp?: string;
  mainLanguage?: string;
  resourceType?: Array<string>;
  resourceTypeNameObject?: { [key: string]: string };
  resourceTitleObject?: { [key: string]: string };
  resourceAltTitleObject?: Array<{ [key: string]: string }>;
  resourceDate?: Array<ResourceDate>;
  resourceTemporalDateRange?: Array<DateRange>;
  resourceIdentifier?: Array<ResourceIdentifier>;
  resourceAbstractObject?: { [key: string]: string };
  supplementalInformationObject?: Array<{ [key: string]: string }>;
  purposeObject?: Array<{ [key: string]: string }>;
  tag?: Array<{ [key: string]: string }>;
  isOpenData?: boolean;
  allKeywords?: { [key: string]: Thesaurus };
  resolutionDistance?: Array<string>;
  resolutionScaleDenominator?: Array<number>;
  extentIdentifierObject?: Array<{ [key: string]: string }>;
  extentDescriptionObject?: Array<{ [key: string]: string }>;
  shape?: Array<string>;
  shapeParsingError?: Array<string>;
  geom?: Array<{ [key: string]: object }>;
  location?: Array<string>;
  resourceTemporalExtentDateRange?: Array<DateRange>;
  resourceTemporalExtentDetails?: Array<DateRangeDetails>;
  resourceVerticalRange?: Array<VerticalRange>;
  coordinateSystem?: Array<string>;
  crsDetails?: Array<CrsDetails>;
  featureTypes?: Array<FeatureType>;
  link?: Array<Link>;
  lineageObject?: Array<{ [key: string]: string }>;
  hassource?: Array<string>;
  recordLink?: Array<RecordLink>;
  sourceDescriptionObject?: Array<{ [key: string]: string }>;
  processSteps?: Array<ProcessStep>;
  measure?: Array<Measure>;
  format?: Array<string>;
  orderingInstructionsObject?: Array<{ [key: string]: string }>;
  recordGroup?: Array<string>;
  parentUuid?: Array<string>;
  recordOwner?: string;
  uuid?: string;
  harvesterUuid?: string;
  groupPublishedId?: Array<number>;
  popularity?: number;
  userinfo?: string;
  isPublishedToAll?: boolean;
  draft?: string;
  changeDate?: string;
  id?: number;
  createDate?: string;
  isPublishedToIntranet?: boolean;
  valid?: number;
  isTemplate?: string;
  feedbackCount?: number;
  rating?: number;
  isHarvested?: boolean;
  userSavedCount?: number;
  sourceCatalogue?: string;
  overview?: Array<Overview>;
  documentStandard?: string;
  root?: string;
  indexingErrorMsg?: Array<IndexingErrorMsg>;
  owner?: number;
  groupOwner?: number;
  logo?: string;
  otherLanguage?: Array<string>;
  otherLanguageId?: Array<string>;
  resourceEdition?: string;
  displayOrder?: number;
  licenseObject?: Array<{ [key: string]: string }>;
  maintenance?: Array<Maintenance>;
  resourceCreditObject?: Array<{ [key: string]: string }>;
  cat?: Array<string>;
  tagNumber?: number;
  mdStatus?: string;
  isPublishedToGuest?: boolean;
  groupPublished?: Array<string>;
  hasxlinks?: boolean;
  inspireConformResource?: boolean;
  valid_inspire?: number;
  inspireReportUrl?: string;
  inspireValidationDate?: string;
  resourceLanguage?: Array<string>;
  OrgObject?: Array<{ [key: string]: string }>;
  recordOperateOn?: Array<string>;
  agg_associated?: Array<string>;
  childUuid?: Array<string>;
  linkUrl?: Array<string>;
  linkProtocol?: Set<string>;
  serviceType?: Array<string>;
  serviceTypeVersion?: Array<string>;
  specificationConformance?: Array<SpecificationConformance>;
  hasfeaturecat?: Array<string>;
}
export namespace IndexRecord {
  export const DocTypeEnum = {
    Metadata: 'metadata',
    Features: 'features',
  } as const;
  export type DocTypeEnum = (typeof DocTypeEnum)[keyof typeof DocTypeEnum];
}
