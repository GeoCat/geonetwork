/**
 * GeoNetwork API
 *
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { OgcApiRecordsThumbnailsDto } from './ogcApiRecordsThumbnailsDto';
import { OgcApiRecordsThemeDto } from './ogcApiRecordsThemeDto';
import { OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto } from './ogcApiRecordsRecordCommonPropertiesExternalIdsInnerDto';
import { Language } from './language';
import { OgcApiRecordsFormatDto } from './ogcApiRecordsFormatDto';
import { Extent } from './extent';
import { OgcApiRecordsLinkTemplateDto } from './ogcApiRecordsLinkTemplateDto';
import { OgcApiRecordsRecordGeoJSONDto } from './ogcApiRecordsRecordGeoJSONDto';
import { IndexRecord } from './indexRecord';
import { OgcApiRecordsLinkDto } from './ogcApiRecordsLinkDto';
import { OgcApiRecordsSchemeDto } from './ogcApiRecordsSchemeDto';
import { Contact } from './contact';


export interface OgcApiRecordsCatalogDto { 
    /**
     * identifier of the collection used, for example, in URIs
     */
    id: string;
    /**
     * A human-readable name given to the resource.
     */
    title?: string;
    /**
     * A free-text account of the resource.
     */
    description?: string;
    links: Array<OgcApiRecordsLinkDto>;
    extent?: Extent;
    /**
     * If this catalog is a homogenous collection of records then itemType is a string of fixed value of record. If this catalog is a homogenous collection of other catalogs then itemType is a string of fixed value of catalog. If this catalog is a heterogenous collection of records and catalogs then itemType is a array indicated that item types of the members of this collections (i.e. record and/or catalog).
     */
    itemType?: OgcApiRecordsCatalogDto.ItemTypeEnum;
    /**
     * the list of coordinate reference systems supported by the service
     */
    crs?: Array<string>;
    /**
     * The date this record was created in the server.
     */
    created?: string;
    /**
     * The most recent date on which the record was changed.
     */
    updated?: string;
    /**
     * Fixed to catalog for collections of records and/or subordinate catalogs.
     */
    type: OgcApiRecordsCatalogDto.TypeEnum;
    /**
     * The topic or topics of the resource. Typically represented using free-form keywords, tags, key phrases, or classification codes.
     */
    keywords?: Array<string>;
    /**
     * A knowledge organization system used to classify the resource.
     */
    themes?: Array<OgcApiRecordsThemeDto>;
    language?: Language;
    /**
     * This list of languages in which this record is available.
     */
    languages?: Array<Language>;
    /**
     * The list of languages in which the resource described by this record is available.
     */
    resourceLanguages?: Array<Language>;
    /**
     * An identifier for the resource assigned by an external (to the catalog) entity.
     */
    externalIds?: Array<OgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto>;
    /**
     * A list of available distributions of the resource.
     */
    formats?: Array<OgcApiRecordsFormatDto>;
    /**
     * A list of contacts qualified by their role(s) in association to the record or the resource described by the record.
     */
    contacts?: Array<Contact>;
    /**
     * A legal document under which the resource is made available. If the resource is being made available under a common license then use an SPDX license id (https://spdx.org/licenses/). If the resource is being made available under multiple common licenses then use an SPDX license expression v2.3 string (https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/) If the resource is being made available under one or more licenses that haven\'t been assigned an SPDX identifier or one or more custom licenses then use a string value of \'other\' and include one or more links (rel=\"license\") in the `link` section of the record to the file(s) that contains the text of the license(s). There is also the case of a resource that is private or unpublished and is thus unlicensed; in this case do not register such a resource in the catalog in the first place since there is no point in making such a resource discoverable.
     */
    license?: string;
    /**
     * A statement that concerns all rights not addressed by the license such as a copyright statement.
     */
    rights?: string;
    thumbnails?: Array<OgcApiRecordsThumbnailsDto>;
    geoNetworkElasticIndexRecord?: IndexRecord;
    /**
     * The extensions/conformance classes used in this record.
     */
    conformsTo?: Array<string>;
    recordsArrayName?: string;
    /**
     * An array of records that are part of this catalog that are encoded in-line with the catalog.
     */
    records?: Array<OgcApiRecordsRecordGeoJSONDto>;
    linkTemplates?: Array<OgcApiRecordsLinkTemplateDto>;
    /**
     * A list of schemes used in this context.
     */
    schemes?: Array<OgcApiRecordsSchemeDto>;
}
export namespace OgcApiRecordsCatalogDto {
    export const ItemTypeEnum = {
        Record: 'record',
        Catalog: 'catalog'
    } as const;
    export type ItemTypeEnum = typeof ItemTypeEnum[keyof typeof ItemTypeEnum];
    export const TypeEnum = {
        Catalog: 'Catalog',
        Catalog2: 'catalog'
    } as const;
    export type TypeEnum = typeof TypeEnum[keyof typeof TypeEnum];
}


