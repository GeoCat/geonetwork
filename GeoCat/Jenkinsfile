pipeline {
    agent any
    tools {
        jdk 'jdk-21'
    }
    environment {
        REGISTRY = 'docker-registry.geocat.net:5000'
        SAFE_BRANCH = "${env.BRANCH_NAME.replaceAll('/', '_')}"
        DOCKER_IMAGE = "${env.REGISTRY}/geocatlive/gn5:${env.SAFE_BRANCH}-${env.GIT_COMMIT[0..7]}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                sh './mvnw -B clean install -Drelax'
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    sh "./mvnw -B -f src/apps/geonetwork/pom.xml spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${DOCKER_IMAGE}"
                }
            }
        }
        stage('Docker Push') {
            when {
                expression { env.BRANCH_NAME != null && env.GIT_COMMIT != null }
            }
            steps {
                script {
                    docker.withRegistry("https://${env.REGISTRY}", 'docker-registry-credentials') {
                        def newImage = docker.image("${env.DOCKER_IMAGE}")
                        newImage.push()
                        newImage.push("${env.SAFE_BRANCH}")
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
